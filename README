# Enhanced TMDB Movie Explorer

A comprehensive movie discovery application built with WinJS, Bootstrap, and The Movie Database (TMDB) API. This enhanced version includes advanced search, filtering, responsive design, and modern web features.

## 🎬 Features

### Core Functionality
- **Movie Discovery**: Browse popular, top-rated, upcoming, and now-playing movies
- **Advanced Search**: Search movies with real-time suggestions and multiple criteria
- **Genre Filtering**: Filter movies by genres with dynamic updates
- **Sorting Options**: Sort by popularity, release date, rating, or title
- **Pagination**: Navigate through large result sets efficiently
- **Responsive Design**: Optimized for desktop, tablet, and mobile devices

### Advanced Features
- **Favorites Management**: Save and manage your favorite movies
- **Movie Details**: Comprehensive movie information including cast, crew, and videos
- **Offline Support**: Service Worker for caching and offline functionality
- **Keyboard Shortcuts**: Quick navigation and actions via keyboard
- **Deep Linking**: URL-based navigation with state preservation
- **Data Export/Import**: Backup and restore your preferences and favorites
- **Real-time Statistics**: Live updates of search results and pagination info

### User Experience
- **Modern UI**: Dark theme with smooth animations and transitions
- **Loading States**: Visual feedback during data loading
- **Error Handling**: Graceful error recovery and user notifications
- **Accessibility**: ARIA labels, keyboard navigation, and screen reader support
- **Performance**: Optimized caching and lazy loading

## 🚀 Installation & Setup

### Prerequisites
- Node.js (v14 or higher)
- npm or yarn
- TMDB API key

### Backend Setup

1. **Clone the repository**
   ```bash
   git clone <your-repo-url>
   cd tmdb-movie-explorer
   ```

2. **Install backend dependencies**
   ```bash
   cd backend
   npm install
   ```

3. **Configure environment variables**
   Create a `.env` file in the backend directory:
   ```env
   API_KEY=your_tmdb_api_key_here
   PORT=3005
   NODE_ENV=development
   ```

4. **Start the backend server**
   ```bash
   npm run dev
   ```
   The server will start on `http://localhost:3005`

### Frontend Setup

1. **Download WinJS**
   Download WinJS 4.0.1 and extract it to `frontend-winjs/lib/winjs-4.0.1/`

2. **Replace existing files**
   Replace the following files with the enhanced versions:
   - `frontend-winjs/pages/home/home.html`
   - `frontend-winjs/js/models/movieModel.js`
   - `frontend-winjs/js/views/movieView.js`
   - `frontend-winjs/js/controllers/movieController.js`
   - `frontend-winjs/js/app.js`
   - `backend/controllers/controller.js`
   - `backend/services/service.js`
   - `backend/routes/routes.js`

3. **Open the application**
   Open `frontend-winjs/pages/home/home.html` in a modern web browser

## 📖 API Documentation

### Endpoints

#### Movies
- `GET /api/discover` - Discover movies with filters
- `GET /api/search` - Search movies by title
- `GET /api/movie/:id` - Get movie details
- `GET /api/popular` - Get popular movies
- `GET /api/top-rated` - Get top-rated movies
- `GET /api/upcoming` - Get upcoming movies
- `GET /api/now-playing` - Get now-playing movies

#### Additional Data
- `GET /api/genres` - Get all movie genres
- `GET /api/movie/:id/recommendations` - Get movie recommendations
- `GET /api/movie/:id/similar` - Get similar movies
- `GET /api/movie/:id/credits` - Get movie cast and crew
- `GET /api/movie/:id/videos` - Get movie videos (trailers, etc.)

#### Utility
- `GET /api/health` - API health check
- `GET /api/configuration` - TMDB configuration

### Query Parameters

#### Search & Discovery
- `query` - Search term for movie titles
- `page` - Page number (default: 1)
- `with_genres` - Genre ID for filtering
- `sort_by` - Sort order (popularity.desc, release_date.desc, etc.)
- `vote_average_gte` - Minimum rating
- `release_date_gte` - Minimum release date

## 🎮 Usage Guide

### Basic Navigation
- **Home**: Click the home button or press `Ctrl+H`
- **Search**: Use the search box or press `F` to focus
- **Favorites**: Click favorites or press `Ctrl+F`
- **Categories**: Use the dropdown menu for different movie categories

### Search & Filtering
1. **Quick Search**: Type in the search box for real-time results
2. **Genre Filter**: Select a genre from the dropdown
3. **Sort Options**: Choose how to sort results
4. **Clear All**: Click "Clear" to reset all filters

### Movie Interaction
- **View Details**: Click on any movie card
- **Add to Favorites**: Click the heart icon or use the modal button
- **Browse Similar**: Use the recommendations in movie details

### Keyboard Shortcuts
- `F` - Focus search box
- `Ctrl+K` - Focus search box
- `Ctrl+H` - Go to home
- `Ctrl+F` - Show favorites
- `Ctrl+R` - Refresh current view
- `←/→` - Navigate pages
- `Esc` - Clear all filters
- `Ctrl+/` - Show keyboard shortcuts

## 🛠️ Architecture

### Frontend Structure
```
frontend-winjs/
├── pages/home/
│   ├── home.html          # Main application page
│   └── home.css           # Page-specific styles
├── js/
│   ├── models/
│   │   └── movieModel.js  # Data layer and API communication
│   ├── views/
│   │   └── movieView.js   # UI rendering and user interaction
│   ├── controllers/
│   │   └── movieController.js # Business logic and state management
│   └── app.js             # Application initialization and configuration
└── lib/
    └── winjs-4.0.1/       # WinJS framework files
```

### Backend Structure
```
backend/
├── controllers/
│   └── controller.js      # Request handlers and business logic
├── services/
│   └── service.js         # TMDB API integration
├── routes/
│   └── routes.js          # API endpoint definitions
├── server.js              # Express server configuration
└── package.json           # Dependencies and scripts
```

### Design Patterns
- **MVC Architecture**: Separation of concerns with Models, Views, and Controllers
- **Observer Pattern**: State management and event handling
- **Factory Pattern**: Component creation and initialization
- **Singleton Pattern**: Global application state
- **Cache Pattern**: API response caching for performance

## 🎨 Customization

### Themes
The application uses CSS custom properties for easy theming:
```css
:root {
    --primary-color: #0078d4;
    --secondary-color: #1a1a1a;
    --accent-color: #ff6b35;
    --text-light: #ffffff;
    --bg-dark: #121212;
    --card-bg: #1e1e1e;
}
```

### Configuration
Modify `AppConfig` in `app.js` to customize:
- Cache timeout
- Items per page
- Feature flags
- API endpoints

## 🚀 Performance Optimization

### Caching Strategy
- **Memory Caching**: Frequently accessed data cached in memory
- **Local Storage**: User preferences and favorites
- **Service Worker**: Offline support and asset caching

### Optimization Features
- **Lazy Loading**: Images loaded as needed
- **Debounced Search**: Reduced API calls during typing
- **Pagination**: Limited results per page
- **Compression**: Minified assets and optimized images

## 🔧 Troubleshooting

### Common Issues

#### API Connection Failed
- Verify TMDB API key is correct
- Check network connectivity
- Ensure backend server is running on port 3005

#### Movies Not Loading
- Check browser console for errors
- Verify API endpoints are accessible
- Clear browser cache and local storage

#### Search Not Working
- Ensure search query is at least 3 characters
- Check for JavaScript errors
- Verify genre filter compatibility

### Debug Tools
- Press `Ctrl+Shift+I` to open developer tools
- Use `window.debugApp()` in console for debug information
- Check network tab for API call status

## 📱 Browser Support

### Supported Browsers
- Chrome 80+
- Firefox 75+
- Safari 13+
- Edge 80+

### Required Features
- ES6+ JavaScript support
- CSS Grid and Flexbox
- Fetch API
- Local Storage
- Service Workers (optional)

## 🔐 Security

### API Security
- CORS configured for specific origins
- API key stored securely in environment variables
- Rate limiting implemented

### Client Security
- Input sanitization for user data
- XSS protection through proper escaping
- Content Security Policy headers

## 🤝 Contributing

### Development Workflow
1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Test thoroughly
5. Submit a pull request

### Code Standards
- Use ES6+ JavaScript features
- Follow consistent naming conventions
- Include JSDoc comments for functions
- Test on multiple browsers
- Ensure accessibility compliance

## 📄 License

This project is licensed under the MIT License. See the LICENSE file for details.

## 🙏 Acknowledgments

- [The Movie Database (TMDB)](https://www.themoviedb.org/) for the comprehensive movie API
- [Bootstrap](https://getbootstrap.com/) for the responsive UI framework
- [Font Awesome](https://fontawesome.com/) for the icon library
- [WinJS](https://github.com/winjs/winjs) for the Windows-style framework

## 📞 Support

For support and questions:
- Create an issue on GitHub
- Check the troubleshooting section
- Review the API documentation

---

**Happy movie exploring! 🎬🍿**